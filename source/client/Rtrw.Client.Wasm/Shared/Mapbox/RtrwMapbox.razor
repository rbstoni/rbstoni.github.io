@implements IAsyncDisposable
@inject IJSRuntime JSRuntime

<div id="map" @ref="mapElement" style="@MapStyle"></div>

@code {
    private ElementReference mapElement;
    private IJSObjectReference? mapModule;
    private IJSObjectReference? mapInstance;
    private IJSObjectReference? mapControl;
    [Parameter] public string MapStyle { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            mapModule = await JSRuntime.InvokeAsync<IJSObjectReference>(
                "import", "./js/mapComponent.js");
            mapInstance = await mapModule.InvokeAsync<IJSObjectReference>(
                "addMapToElement", mapElement);
            mapControl = await mapModule.InvokeAsync<IJSObjectReference>(
                "addMapControl", mapInstance);
        }
    }

    private async Task ShowAsync(double latitude, double longitude)
    {
        if (mapModule is not null && mapInstance is not null)
        {
            await mapModule.InvokeVoidAsync("setMapCenter", mapInstance,
                latitude, longitude).AsTask();
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (mapInstance is not null)
        {
            await mapInstance.DisposeAsync();
        }

        if (mapModule is not null)
        {
            await mapModule.DisposeAsync();
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
}