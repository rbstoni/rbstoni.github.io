@namespace Rtrw.Client.Wasm.Components
@implements IAsyncDisposable
@inject IRtrwPopoverService Service
@inherits RtrwComponentBase

<div id="@($"popover-{_handler.Id}")" class="rtrw-popover-cascading-value">
</div>

@code {
    private RtrwPopoverHandler? _handler;

    [Parameter] public Origin AnchorOrigin { get; set; } = Origin.TopLeft;
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public double Delay { get; set; } = 0;
    [Parameter] public double Duration { get; set; } = 251;
    [Parameter] public bool Fixed { get; set; }
    [Parameter] public int? MaxHeight { get; set; } = null;
    [Parameter] public bool Paper { get; set; } = true;
    [Parameter] public bool Square { get; set; }
    [Parameter] public bool Outlined { get; set; } = true;
    [Parameter] public bool Open { get; set; }
    [Parameter] public OverflowBehavior OverflowBehavior { get; set; } = OverflowBehavior.FlipOnOpen;
    [Parameter] public bool RelativeWidth { get; set; } = false;
    [Parameter] public Origin TransformOrigin { get; set; } = Origin.TopLeft;

    protected string PopoverClass
        => new CssBuilder("rtrw-popover")
            .AddClass($"rtrw-popover-fixed", Fixed)
            .AddClass($"rtrw-popover-open", Open)
            .AddClass($"rtrw-popover-{TransformOrigin.EnumToDescriptionString()}")
            .AddClass($"rtrw-popover-anchor-{AnchorOrigin.EnumToDescriptionString()}")
            .AddClass($"rtrw-popover-overflow-{OverflowBehavior.EnumToDescriptionString()}")
            .AddClass($"rtrw-popover-relative-width", RelativeWidth)
            .AddClass($"rtrw-paper", Paper)
            .AddClass($"rtrw-paper-square", Paper && Square)
            .AddClass($"rtrw-paper-outlined", Paper && Outlined)
            .AddClass($"overflow-y-auto", MaxHeight != null)
            .AddClass(Class ?? string.Empty)
            .Build();

    protected string PopoverStyles =>
        new StyleBuilder()
        .AddStyle("transition-duration", $"{Duration}ms")
        .AddStyle("transition-delay", $"{Delay}ms")
        .AddStyle("max-height", MaxHeight.ToPx(), MaxHeight != null)
        .AddStyle(Style ?? string.Empty)
        .Build();

    public async ValueTask DisposeAsync()
    {
        try
        {
            await Service.Unregister(_handler);
        }
        catch (JSDisconnectedException) { }
        catch (TaskCanceledException) { }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == true)
        {
            await _handler.Initialize();
            await Service.InitializeIfNeeded();
        }

        await base.OnAfterRenderAsync(firstRender);
    }
    protected override void OnInitialized()
    {
        _handler = Service.Register(ChildContent ?? new RenderFragment((x) => { }));
        _handler.SetComponentBaseParameters(this, PopoverClass, PopoverStyles, Open);
        base.OnInitialized();
    }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        _handler?.UpdateFragment(ChildContent!, this, PopoverClass, PopoverStyles, Open);
    }
}