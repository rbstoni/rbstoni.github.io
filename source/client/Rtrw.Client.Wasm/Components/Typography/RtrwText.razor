@namespace Rtrw.Client.Wasm.Components
@switch (Typo)
{
    case Typo.H1:
        <h1 @attributes="Attributes" class="@ClassName" style="@StyleName">@ChildContent</h1>
        break;
    case Typo.H2:
        <h2 @attributes="Attributes" class="@ClassName" style="@StyleName">@ChildContent</h2>
        break;
    case Typo.H3:
        <h3 @attributes="Attributes" class="@ClassName" style="@StyleName">@ChildContent</h3>
        break;
    case Typo.H4:
        <h4 @attributes="Attributes" class="@ClassName" style="@StyleName">@ChildContent</h4>
        break;
    case Typo.H5:
        <h5 @attributes="Attributes" class="@ClassName" style="@StyleName">@ChildContent</h5>
        break;
    case Typo.H6:
        <h6 @attributes="Attributes" class="@ClassName" style="@StyleName">@ChildContent</h6>
        break;
    case Typo.Subtitle1:
        <h6 @attributes="Attributes" class="@ClassName" style="@StyleName">@ChildContent</h6>
        break;
    case Typo.Subtitle2:
        <h6 @attributes="Attributes" class="@ClassName" style="@StyleName">@ChildContent</h6>
        break;
    case Typo.Body1:
        <p @attributes="Attributes" class="@ClassName" style="@StyleName">@ChildContent</p>
        break;
    case Typo.Body2:
        <p @attributes="Attributes" class="@ClassName" style="@StyleName">@ChildContent</p>
        break;
    case Typo.Button:
        <span @attributes="Attributes" class="@ClassName" style="@StyleName">@ChildContent</span>
        break;
    case Typo.Caption:
        <span @attributes="Attributes" class="@ClassName" style="@StyleName">@ChildContent</span>
        break;
    case Typo.Overline:
        <span @attributes="Attributes" class="@ClassName" style="@StyleName">@ChildContent</span>
        break;
    case Typo.Inherit:
        <span @attributes="Attributes" class="@ClassName" style="@StyleName">@ChildContent</span>
        break;
}

@code {
    protected string? ClassName
        => new CssBuilder("typography")
            .AddClass($"typography-{Typo.DisplayName()}")
            .AddClass($"rtrw-{Color.DisplayName()}-text", Color != ThemeColor.Default && Color != ThemeColor.Inherit)
            .AddClass("typography-gutterbottom", GutterBottom)
            .AddClass($"typography-align-{Align.DisplayName()}", Align != Align.Inherit)
            .AddClass("typography-display-inline", Inline)
            .AddClass(Class)
            .Build();

    protected string? StyleName
        => new StyleBuilder()
            .Build();

    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public Dictionary<string, object>? Attributes { get; set; }
    [Parameter] public Align Align { get; set; } = Align.Inherit;
    [Parameter] public string? Class { get; set; }
    [Parameter] public ThemeColor Color { get; set; } = ThemeColor.Inherit;
    [Parameter] public bool GutterBottom { get; set; } = false;
    [Parameter] public bool Inline { get; set; }
    [Parameter] public Typo Typo { get; set; } = Typo.Inherit;
}