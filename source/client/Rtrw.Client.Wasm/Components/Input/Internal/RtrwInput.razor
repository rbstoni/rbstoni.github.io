@using Rtrw.Client.Wasm.Components.Input.Base
@typeparam T
@inherits RtrwBaseInput<T>

<div class="@Classname" style="@Style">
    @if (Adornment == Adornment.Start)
    {
        <RtrwInputAdornment Class="@AdornmentClassname"
                        AdornmentClick="@OnAdornmentClick"
                        AdornmentContent="@AdornmentContent"
                        AdornmentSvg="@AdornmentSvg" />
    }

    @if (Lines > 1)
    {
        <textarea class="@InputClassname"
              @ref="ElementReference"
              rows="@Lines"
              @attributes="UserAttributes"
              type="@InputTypeString"
              placeholder="@Placeholder"
              disabled=@Disabled
              readonly="@ReadOnly"
              inputmode="@InputMode.ToString()"
              @oninput="OnInput"
              @onchange="OnChange"
              @onblur="@OnBlurred"
              @onkeydown="@InvokeKeyDown"
              @onkeypress="@InvokeKeyPress"
              @onkeyup="@InvokeKeyUp"
              @onpaste="@OnPaste"
              value="@internalText"
              maxlength="@MaxLength"
              @onkeydown:preventDefault="@KeyDownPreventDefault"
              @onkeypress:preventDefault="@KeyPressPreventDefault"
              @onkeyup:preventDefault="@KeyUpPreventDefault"
              @onmousewheel="@OnMouseWheel"
              @onwheel="@OnMouseWheel"
              aria-invalid="@Error.ToString().ToLower()"
              aria-describedby="@ErrorId">
            @Text
                    </textarea>
    }
    else
    {
        <input class="@InputClassname"
           @ref="ElementReference"
           @attributes="UserAttributes"
           type="@InputTypeString"
           value="@internalText"
           @oninput="OnInput"
           @onchange="OnChange"
           placeholder="@Placeholder"
           disabled=@Disabled
           readonly="@ReadOnly"
           @onblur="@OnBlurred"
           inputmode="@InputMode.ToString()"
           pattern="@Pattern"
           @onkeydown="@InvokeKeyDown"
           @onkeypress="@InvokeKeyPress"
           @onkeyup="@InvokeKeyUp"
           maxlength="@MaxLength"
           @onkeydown:preventDefault="KeyDownPreventDefault"
           @onkeypress:preventDefault="@KeyPressPreventDefault"
           @onkeyup:preventDefault="@KeyUpPreventDefault"
           @onmousewheel="@OnMouseWheel"
           @onwheel="@OnMouseWheel"
           aria-invalid="@Error.ToString().ToLower()"
           aria-describedby="@ErrorId" />

        @if (Disabled)
        {
            <div class="@InputClassname" style="@("display:"+(InputType == InputType.Hidden && ChildContent != null ? "inline" : "none"))" @onblur="@OnBlurred" @ref="@elementReference1">
                @ChildContent
            </div>
        }
        else
        {
            <div class="@InputClassname" style="@("display:"+(InputType == InputType.Hidden && ChildContent != null ? "inline" : "none"))" tabindex="@(InputType == InputType.Hidden && ChildContent != null ? 0 : -1)" @onblur="@OnBlurred" @ref="@elementReference1">
                @ChildContent
            </div>
        }
    }

    @if (showClearable && !Disabled)
    {
        <RtrwIconButton Class="@ClearButtonClassname" Style="padding: 6px" Color=ThemeColor.Inherit OnClick="@ClearButtonClickHandlerAsync">
            <RtrwSvgClearX />
        </RtrwIconButton>
    }

    @if (Adornment == Adornment.End)
    {
        <RtrwInputAdornment Class="@AdornmentClassname" Style="margin-right: -6px" AdornmentClick="@OnAdornmentClick" AdornmentContent="@AdornmentContent" AdornmentSvg="@AdornmentSvg" />
    }

    @if (Variant == Variant.Outlined)
    {
        <div class="rtrw-input-outlined-border"></div>
    }
</div>