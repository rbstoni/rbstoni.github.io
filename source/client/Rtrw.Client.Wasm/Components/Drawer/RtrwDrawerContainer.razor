@namespace Rtrw.Client.Wasm.Components

<div @attributes="Attributes" class="@ClassName" style="@StyleName">
    <CascadingValue Value="this" IsFixed="true">
        @ChildContent
    </CascadingValue>
</div>

@code {
    private List<RtrwDrawer> _drawers = new();

    [Parameter] public Dictionary<string, object> Attributes { get; set; } = new Dictionary<string, object>();
    [Parameter] public string? Class { get; set; }
    [Parameter] public string? Style { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    protected virtual string ClassName
        => new CssBuilder()
            .AddClass(GetDrawerClass(FindLeftDrawer()))
            .AddClass(GetDrawerClass(FindRightDrawer()))
            .AddClass(Class ?? default!)
            .Build();
    protected bool Fixed { get; set; } = false;
    protected string StyleName
        => new StyleBuilder()
            .AddStyle("--rtrw-drawer-width-left", GetDrawerWidth(FindLeftDrawer()), !string.IsNullOrEmpty(GetDrawerWidth(FindLeftDrawer())))
            .AddStyle("--rtrw-drawer-width-right", GetDrawerWidth(FindRightDrawer()), !string.IsNullOrEmpty(GetDrawerWidth(FindRightDrawer())))
            .AddStyle("--rtrw-drawer-width-mini-left", GetMiniDrawerWidth(FindLeftMiniDrawer()), !string.IsNullOrEmpty(GetMiniDrawerWidth(FindLeftMiniDrawer())))
            .AddStyle("--rtrw-drawer-width-mini-right", GetMiniDrawerWidth(FindRightMiniDrawer()), !string.IsNullOrEmpty(GetMiniDrawerWidth(FindRightMiniDrawer())))
            .AddStyle(Style ?? default!)
            .Build();

    internal void Add(RtrwDrawer drawer)
    {
        _drawers.Add(drawer);
        StateHasChanged();
    }
    internal void FireDrawersChanged() => StateHasChanged();
    internal void Remove(RtrwDrawer drawer) => _drawers.Remove(drawer);
    private RtrwDrawer FindLeftDrawer()
    {
        return _drawers.FirstOrDefault(d => d.Anchor == Anchor.Left) ?? default!;
    }
    private RtrwDrawer FindLeftMiniDrawer()
    {
        return _drawers.FirstOrDefault(d => d.Variant == DrawerVariant.Mini && (d.Anchor == Anchor.Left)) ?? default!;
    }
    private RtrwDrawer FindRightDrawer()
    {
        return _drawers.FirstOrDefault(d => d.Anchor == Anchor.Right) ?? default!;
    }
    private RtrwDrawer FindRightMiniDrawer()
    {
        return _drawers.FirstOrDefault(d => d.Variant == DrawerVariant.Mini && (d.Anchor == Anchor.Right)) ?? default!;
    }
    private string GetDrawerClass(RtrwDrawer drawer)
    {
        if (drawer == null)
            return string.Empty;

        var className = $"rtrw-drawer-{(drawer.Open ? "open" : "close")}-{drawer.Variant.EnumToDescriptionString()}";
        className += $"-{drawer.Anchor.EnumToDescriptionString()}";

        className += $" rtrw-drawer-{drawer.Anchor.EnumToDescriptionString()}-clipped-{drawer.ClipMode.EnumToDescriptionString()}";

        return className;
    }
    private string GetDrawerWidth(RtrwDrawer drawer)
    {
        if (drawer == null)
            return string.Empty;

        return drawer.Width ?? default!;
    }
    private string GetMiniDrawerWidth(RtrwDrawer drawer)
    {
        if (drawer == null)
            return string.Empty;

        return drawer.MiniWidth ?? default!;
    }
}