@page "/home"
@using Rtrw.Client.Wasm.Components.Enums
@using Rtrw.Client.Wasm.Features.Post.Components
@using Rtrw.Client.Wasm.Components
@using Rtrw.Client.Wasm.Models
@using Rtrw.Client.Wasm.Services
@inject ICurrentUser CurrentUser
@inject IPostService PostService


<RtrwAppBar Position="sticky-top">
    <EndBarContent>
        <AvatarWarga AvatarUrl="@CurrentWarga?.AvatarUrl" Size="40" />
    </EndBarContent>
</RtrwAppBar>
<RtrwMainContent Style="gap: 4px">
    @if (Posts != null && Posts.Count != 0 && !dataLoaded)
    {
        <Virtualize Items="Posts" Context="post">
            <ItemContent>
                <RtrwPostItem PostId="@post.Id" @key="@post.Id" />
            </ItemContent>
            <Placeholder>
                <RtrwSpinner Color="ThemeColor.Primary" Size="40px" Indeterminate />
            </Placeholder>
        </Virtualize>
    }

    @if (dataLoaded)
    {
        <RtrwOverlay Absolute DarkBackground LockScroll Visible="dataLoaded">
            <RtrwSpinner Indeterminate StrokeWidth="4" Color="ThemeColor.Primary" />
        </RtrwOverlay>
    }
</RtrwMainContent>
<RtrwFooter>
    <RtrwNavBar />
</RtrwFooter>

@code {
    List<Post>? Posts { get; set; }
    [CascadingParameter] Warga? CurrentWarga { get; set; }

    bool dataLoaded;

    protected override async Task OnParametersSetAsync()
    {
        dataLoaded = true;
        var posts = await PostService.GetPostsAsync();
        var sortedPosts = posts.OrderBy(x => x.CreatedAt);
        if (sortedPosts?.Count() != 0)
        {
            Posts = sortedPosts!.ToList();
        }
        await base.OnParametersSetAsync();
        dataLoaded = false;
    }

    //protected override async void OnInitialized()
    //{
    //    CurrentWarga = CurrentUser.Warga;
    //    var results = (await PostService.GetPostsAsync()).OrderBy(x => x.CreatedAt).ToList();
    //    if (results != null && results.Count() != 0)
    //    {
    //        Posts = results;
    //    }
    //    StateHasChanged();
    //}
}