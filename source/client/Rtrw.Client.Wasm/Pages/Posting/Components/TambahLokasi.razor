@using Rtrw.Client.Wasm.Components.Base
@using Rtrw.Client.Wasm.Components.Enums
@using Rtrw.Client.Wasm.Components.Extensions
@using Rtrw.Client.Wasm.Extensions
@using Rtrw.Client.Wasm.Models
@using Rtrw.Client.Wasm.Services.Geocoding
@using Rtrw.Client.Wasm.Svgs
@using Rtrw.Client.Wasm.Utilities
@inject IModalService ModalService
@inject IGeocodingApiService GeocodingApiService
@inherits RtrwComponentBase

<div class="@ClassName" style="@Style" type="button" @onclick="OpenModal">
    <RtrwSvgGeoTag />
    @if (Post?.PostGeocoder != null)
    {
        <div class="location-label @Class" style="@Style">@Post.PostGeocoder.Alamat</div>
        <MiniMap Longitude="@Post.PostGeocoder.Longitude.StringToDouble()" Latitude="@Post.PostGeocoder.Latitude.StringToDouble()" OnAddressFound="OnAddressFound" />
    }
    else
    {
        <span class="location-label">Tambah lokasi</span>
    }
</div>

<RtrwModal @bind-IsVisible="visible" Options="options">
    <TitleContent>
        @Post.PostGeocoder.Alamat
        @Post.PostGeocoder.Kelurahan
    </TitleContent>
    <ModalContent>
        <MiniMap />
    </ModalContent>
</RtrwModal>

@code {
    protected string? ClassName
        => new CssBuilder("tambah-lokasi")
            .AddClass(Class ?? null!)
            .Build();

    [CascadingParameter] protected Post? Post { get; set; }

    bool visible;
    ModalOptions options = new()
        {
            CloseButton = true,
            FullScreen = false,
            NoHeader = false,
            FullWidth = false,
            Position = ModalPosition.Center
        };
    void OnAddressFound(string address)
    {
        Post.PostGeocoder.Alamat = address;
    }
    void OpenModal() => visible = true;
}