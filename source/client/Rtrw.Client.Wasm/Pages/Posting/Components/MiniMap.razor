@using Rtrw.Client.Wasm.Components.Base
@using Rtrw.Client.Wasm.Components.Enums
@using Rtrw.Client.Wasm.Components.Extensions
@using Rtrw.Client.Wasm.JsInterop
@using Rtrw.Client.Wasm.Services.Geocoding
@using Rtrw.Client.Wasm.Utilities
@inherits RtrwComponentBase
@inject IMapboxJsInterop MapboxJsInterop
@inject IGeocodingApiService GeocodingApiService
@inject ILogger<MiniMap> Logger

<RtrwCarton>
    <div @ref="@mapElement" @attributes="@UserAttributes" class="@ClassName" style="@StyleName"></div>
    <div class="map-overlay">@address</div>
</RtrwCarton>

@code {
    [Parameter] public double? Longitude { get; set; }
    [Parameter] public double? Latitude { get; set; }
    [Parameter] public EventCallback<string> OnAddressFound { get; set; }
    string? address;
    protected string? ClassName
        => new CssBuilder("mini-map")
            .AddClass($"rtrw-position-{Position.EnumToDescriptionString()}")
            .AddClass(Class)
            .Build();

    protected string? StyleName
        => new StyleBuilder()
            .AddStyle("height", $"{Height}", !String.IsNullOrEmpty(Height))
            .AddStyle("width", $"{Width}", !String.IsNullOrEmpty(Width))
            .AddStyle("max-height", $"{MaxHeight}", !String.IsNullOrEmpty(MaxHeight))
            .AddStyle("max-width", $"{MaxWidth}", !String.IsNullOrEmpty(MaxWidth))
            .AddStyle("min-height", $"{MinHeight}", !String.IsNullOrEmpty(MinHeight))
            .AddStyle("min-width", $"{MinWidth}", !String.IsNullOrEmpty(MinWidth))
            .AddStyle(Style)
            .Build();

    protected ElementReference mapElement;
    [Parameter] public Position Position { get; set; } = Position.Relative;
    [Parameter] public string? Height { get; set; } = "250px";
    [Parameter] public string? Width { get; set; }
    [Parameter] public string? MaxHeight { get; set; }
    [Parameter] public string? MaxWidth { get; set; }
    [Parameter] public string? MinHeight { get; set; }
    [Parameter] public string? MinWidth { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var mapInstance = await MapboxJsInterop.LoadMapToElement(mapElement);
            await MapboxJsInterop.SetMapCenterAsync(mapInstance, Longitude.Value, Latitude.Value);
            var geocodingResponse = await GeocodingApiService.ForwardGeocoding($"{Longitude.Value.ToString()},{Latitude.Value.ToString()}");
            address = geocodingResponse.Features.FirstOrDefault().Properties.Address;
            if (address.IsNonEmpty())
            {
                await OnAddressFound.InvokeAsync(address);
            }
            Logger.LogInformation($"Alamat:{address}");
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}

