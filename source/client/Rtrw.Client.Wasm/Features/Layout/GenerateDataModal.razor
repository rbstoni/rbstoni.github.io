@using Rtrw.Client.Wasm.Components.Enums
@using Rtrw.Client.Wasm.FakeData.Bogus
@using Rtrw.Client.Wasm.Models
@using Rtrw.Client.Wasm.Services
@inject IPostService PostService

<RtrwModal>
    <ModalContent>
        <div class="rtrw-flex rtrw-flex-col rtrw-justify-content-center rtrw-align-items-center rtrw-width-100">
            <svg xmlns="http://www.w3.org/2000/svg" width="103.658" height="26.274" viewBox="0 0 103.658 26.274">
                <g id="b" transform="translate(-0.125 -0.115)">
                    <g id="c" transform="translate(0.5 0.49)">
                        <g id="Group_530" data-name="Group 530" transform="translate(0 0)">
                            <path id="Path_2263" data-name="Path 2263" d="M15.355,16.88a7.927,7.927,0,0,0,3.528-2.991,8.492,8.492,0,0,0,1.236-4.647,8.769,8.769,0,0,0-1.236-4.723,7.955,7.955,0,0,0-3.528-2.991A13.16,13.16,0,0,0,9.879.49H.5V26.014H3.186V17.507h6.823a16.574,16.574,0,0,0,2.046-.125l5.793,8.632h2.659l-6.129-8.757a9.3,9.3,0,0,0,.972-.376ZM9.942,15.269H3.186V2.285H9.942a8.67,8.67,0,0,1,5.793,1.7,5.989,5.989,0,0,1,1.979,4.808,5.919,5.919,0,0,1-1.979,4.773A8.67,8.67,0,0,1,9.942,15.269Z" transform="translate(-0.5 -0.49)" fill="#ffce43" stroke="#ffce43" stroke-miterlimit="10" stroke-width="0.75" />
                            <path id="Path_2264" data-name="Path 2264" d="M50.5,2.739h8.954V26.019H62.14V2.739h8.506V.5H50.5Z" transform="translate(-28.115 -0.496)" fill="#ffce43" stroke="#ffce43" stroke-miterlimit="10" stroke-width="0.75" />
                            <path id="Path_2265" data-name="Path 2265" d="M115.355,16.88a7.927,7.927,0,0,0,3.528-2.991,8.492,8.492,0,0,0,1.236-4.647,8.769,8.769,0,0,0-1.236-4.723,7.955,7.955,0,0,0-3.528-2.991A13.16,13.16,0,0,0,109.879.49H100.5V26.014h2.686V17.507h6.823a16.574,16.574,0,0,0,2.046-.125l5.793,8.632h2.659l-6.129-8.757a9.3,9.3,0,0,0,.972-.376Zm-5.413-1.612h-6.756V2.285h6.756a8.67,8.67,0,0,1,5.793,1.7,5.989,5.989,0,0,1,1.979,4.808,5.919,5.919,0,0,1-1.979,4.773A8.67,8.67,0,0,1,109.942,15.269Z" transform="translate(-55.73 -0.49)" fill="#0db201" stroke="#0db201" stroke-miterlimit="10" stroke-width="0.75" />
                            <path id="Path_2266" data-name="Path 2266" d="M183.546.5l-8.851,22.206L169.5,9.579l-1.227-3.1L165.9.5h-2.624l3.685,9.254L161.8,22.706,153.008.5H150.38l10.172,25.519h2.4l5.247-13.176,5.252,13.176h2.4L186.008.5Z" transform="translate(-83.278 -0.496)" fill="#0db201" stroke="#0db201" stroke-miterlimit="10" stroke-width="0.75" />
                        </g>
                    </g>
                </g>
            </svg>
            <pre>Sedang membangun data</pre>
        </div>
        <hr />
        <div class="code-box">
            @if (Reports?.Count() != 0)
            {
                @foreach (var report in Reports)
                {
                    <div class="code-block">@report</div>
                }
            }
        </div>
        @if (initial)
        {
            <RtrwButton Disabled="busy" Color="ThemeColor.Primary" Variant="Variant.Filled" FullWidth OnClick="()=>GenerateFakeData(5)">
                @if (busy)
                {
                    <RtrwSpinner Color="ThemeColor.Primary" Style="align-self: center" />
                }
                else
                {
                    @("Mulai mengisi data acak")
                    ;
                }
            </RtrwButton>
        }
        @if (finished)
        {
            <RtrwButton Color="ThemeColor.Primary" Variant="Variant.Filled" FullWidth OnClick="ModalClose">
                Lanjutkan ke RTRW
            </RtrwButton>
        }

    </ModalContent>
</RtrwModal>

@code {
    bool busy, initial = true, finished;
    List<string> Reports { get; set; } = new();
    Dummy Dummy { get; set; } = new Dummy();
    [CascadingParameter] RtrwModalInstance? Modal { get; set; }
    async Task GenerateFakeData(int dataNumber)
    {
        busy = true;
        StateHasChanged();
        await Task.Delay(1000);
        for (var i = 0; i < dataNumber; i++)
        {
            var post = Dummy.GenerateFakePost().Generate();
            await PostService.SavePostAsync(post);
            Reports.Add($"Posting atas nama {post.Author.FullName} telah dibuat di kelurahan {post.Author.Geocoder.Kelurahan}");
            StateHasChanged();
            await Task.Delay(10);
        }
        busy = false;
        initial = false;
        finished = true;
        StateHasChanged();
    }

    void ModalClose()
    {
        Modal.Close(ModalResult.Ok(true));
    }
}