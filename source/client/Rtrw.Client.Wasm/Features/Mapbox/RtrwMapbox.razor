@inherits RtrwComponentBase
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject ILogger<RtrwMapbox> Logger

@using Rtrw.Client.Wasm.Components.Base
@using Rtrw.Client.Wasm.Extensions
@using Rtrw.Client.Wasm.JsInterop
@using Rtrw.Client.Wasm.Models
@using Rtrw.Client.Wasm.Utilities
@using System.Text.Json

<div @ref="mapElementReference" @attributes="@UserAttributes" class="@ClassName" style="@StyleName" />

@code {
    protected string ClassName
        => new CssBuilder("mapbox")
            .AddClass(Class ?? null!)
            .Build();

    protected string StyleName
        => new StyleBuilder()
            .AddStyle(Style ?? null!)
            .Build();

    private ElementReference mapElementReference;
    IJSObjectReference? mapJsModule, mapInstance, mapControl;

    //[CascadingParameter] protected MapboxFeatureProperties? FeatureProperties { get; set; }
    [CascadingParameter] protected Warga Warga { get; set; }
    [Parameter] public EventCallback<MapboxFeatureProperties> OnKelurahanChanged { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var longitude = Warga?.Geocoder?.Longitude?.StringToDouble();
            var latitude = Warga?.Geocoder?.Latitude?.StringToDouble();
            mapJsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/mapboxElement.js");
            mapInstance = await mapJsModule.InvokeAsync<IJSObjectReference>("addMapToElement", mapElementReference, longitude, latitude, DotNetObjectReference.Create(this));
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    [JSInvokable("GetQueryRenderedFeatures")]
    public async void GetQueryRenderedFeatures(string result)
    {
        var deserializedObject = JsonSerializer.Deserialize<MapboxFeatureProperties>(result);
        await OnKelurahanChanged.InvokeAsync(deserializedObject);
        StateHasChanged();
    }

    public async Task ShowAsync(double? longitude, double? latitude)
    {
        if (latitude == null || longitude == null)
        {
            return;
        }
        if (mapJsModule is not null && mapInstance is not null)
        {
            await mapJsModule.InvokeVoidAsync("setMapCenter", mapInstance, longitude, latitude).AsTask();
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (mapInstance is not null)
        {
            await mapInstance.DisposeAsync();
        }

        if (mapJsModule is not null)
        {
            await mapJsModule.DisposeAsync();
        }
    }
}