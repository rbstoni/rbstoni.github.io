@page "/post/{PostId?}"
@inject IPostService PostService
@using Rtrw.Client.Wasm.Components.Enums
@using Rtrw.Client.Wasm.Enums
@using Rtrw.Client.Wasm.Extensions
@using Rtrw.Client.Wasm.Features.Post.Components
@using Rtrw.Client.Wasm.Models
@using Rtrw.Client.Wasm.Services
@using Rtrw.Client.Wasm.Utilities

<RtrwAppBar Position="sticky-top" Style="filter: drop-shadow(0px 1px 3px rgba(0, 0, 0, 0.16));">
    <EndBarContent>
        <RtrwIconButton Href="search">
            <RtrwSvgSearch />
        </RtrwIconButton>
        <RtrwIconButton Href="pesan">
            <RtrwSvgChat />
        </RtrwIconButton>
        <RtrwIconButton Href="new-post" Style="margin-right: -12px">
            <RtrwSvgNewPost />
        </RtrwIconButton>
    </EndBarContent>
</RtrwAppBar>

<CascadingValue Value="@Post" IsFixed="true">
    <PostContainer>
        <PostHeader>
            <Flex Direction="FlexDirection.Row" Gap="8">
                <AvatarWarga Id="@Post.Author.Id" Size="40" AvatarUrl="@Post.Author.AvatarUrl" />
                <FlexItem AlignSelf="FlexAlignSelf.FlexStart">
                    <Flex Direction="FlexDirection.Column">
                        <InfoWarga FullName="@Post.Author.FullName" Kelurahan="@Post?.Author?.Geocoder?.Kelurahan" />
                        <PostTimeSpan DateTime="@Post.CreatedAt" />
                    </Flex>
                </FlexItem>
                <FlexItem AlignSelf="FlexAlignSelf.FlexStart" Class="rtrw-margin-start-auto">
                    <ReportIconButton />
                </FlexItem>
            </Flex>
        </PostHeader>
        <PostBody>
            @if (@Post?.Media.Count != 0)
            {
                <RtrwConveyor Media="@Post?.Media" BorderRadius="12px" Height="100%" />
            }
            <PostText Text="@Post?.Text" PostId="@Post?.Id" />
            <PostGeocoder Geocoder="@Post?.PostGeocoder" />
        </PostBody>
        <PostFooter>
            <LastThreeReaction Reactions="@Post.Reactions" />
            <RtrwSpacer />
            <AddReaction NewReaction="@AddCurrentUserReaction" RemoveReaction="@RemoveCurrentUserReaction" />
            <RtrwButton Style="gap: 8px">
                <RtrwSvgComment />
                @if (Post.Comments?.Count > 0)
                {
                    <span class="message-count-label">@Post.Comments?.Count</span>
                }
            </RtrwButton>
            <RtrwButton Style="margin-right: -22px;">
                <RtrwSvgShare />
            </RtrwButton>
        </PostFooter>
        <hr />
        @foreach (var comment in Post.Comments)
        {
            <RtrwCommentItem CommentId="@comment.Id"></RtrwCommentItem>
        }
        <AddNewComment PostNewComment="PostNewComment"></AddNewComment>
    </PostContainer>
</CascadingValue>

@code {
    [Parameter] public bool NoPadding { get; set; } = false;
    [Parameter] public string? PostId { get; set; }
    [CascadingParameter] protected Warga Warga { get; set; }
    Post Post { get; set; } = new();
    string? currentUserReactionName;
    bool currentUserHasReacted;
    Emoji currentEmoji;
    void PostNewComment(Comment comment)
    {
        Post.Comments.Add(comment);
        PostService.SavePostAsync(Post);
        StateHasChanged();
    }

    protected string PostListItemStyle
    => new StyleBuilder()
       .AddStyle("padding", "0", NoPadding)
       .Build();

    async Task AddCurrentUserReaction(Emoji emoji)
    {
        var reaction = new Reaction() { Reactor = Warga, Emoji = emoji };
        var post = await PostService.GetPostByIdAsync(Post.Id);
        var userHasReacted = post.Reactions.Any(x => x.Reactor.Id == reaction.Reactor.Id);
        if (!userHasReacted)
        {
            post.Reactions.Add(reaction);
            //await PostService.SavePostAsync(post);
        }
        Post = post;
        StateHasChanged();
    }
    async Task RemoveCurrentUserReaction()
    {
        var currentUserReaction = Post.Reactions.FirstOrDefault(x => x.Reactor.Id == Warga.Id);
        if (currentUserReaction != null)
        {
            Post.Reactions.Remove(currentUserReaction);
            //await PostService.SaveChangesAsync();
        }
        StateHasChanged();
    }

    Task CheckIfCurrentUserHasReacted()
    {
        var currentUserReaction = Post.Reactions.FirstOrDefault(x => x.Reactor.Id == Warga.Id);
        if (currentUserReaction != null)
        {
            currentUserHasReacted = true;
            currentEmoji = currentUserReaction.Emoji;
        }
        else
        {
            currentUserHasReacted = false;
        }
        return Task.CompletedTask;
    }

    protected async override Task OnParametersSetAsync()
    {
        Post = await PostService.GetPostByIdAsync(PostId);
        StateHasChanged();
    }
}