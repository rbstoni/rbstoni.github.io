@inherits RtrwComponentBase
@inject IJSRuntime jsRuntime
@inject IPostService PostService
@inject ICurrentUser currentUser
@implements IAsyncDisposable
@using Rtrw.Client.Wasm.Components.Base
@using Rtrw.Client.Wasm.Components.Enums
@using Rtrw.Client.Wasm.Services

<EditForm Model="@Comment" OnValidSubmit="OnValidSubmitHandler">
    <div class="comment-wrapper @Class" style="@Style">
        <div class="comment-container">
            <div class="rtrw-flex rtrw-justify-content-start rtrw-align-items-center rtrw-align-self-end">
                <RtrwIconButton Class="comment-button">
                    <RtrwSvgGeoTag Style="width: 24px; height:24px" />
                </RtrwIconButton>
                <RtrwIconButton Class="comment-button">
                    <RtrwSvgCameraFilled Style="width: 24px;height:24px" />
                </RtrwIconButton>
            </div>
            <div class="input-control">
                <textarea @bind-value="@Comment.Text"
                          @bind-value:event="oninput"
                          @ref="textareaElementReference"
                          class="input-textarea"
                          rows="1"
                          maxlength="512"
                          placeholder="Tambah komen..." />

                @if (showSendButton)
                {
                    <RtrwIconButton Class="comment-button" Type="ButtonType.Submit">
                        <RtrwSvgPaperPlaneOutlined Style="width: 24px; height: 24px; color: #0DB201" />
                    </RtrwIconButton>
                }
            </div>
        </div>
    </div>
</EditForm>
@code {
    [Parameter] public EventCallback<Comment> PostNewComment { get; set; }
    Comment Comment { get; set; } = new();

    IJSObjectReference? moduleInstance;
    ElementReference textareaElementReference;
    bool showSendButton => !string.IsNullOrWhiteSpace(Comment.Text);

    protected override async void OnAfterRender(bool firstRender)
    {
        moduleInstance = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/autosize.js");
        Console.WriteLine(moduleInstance is null);
        if (moduleInstance != null)
        {
            await moduleInstance.InvokeVoidAsync("autosizeTextarea", textareaElementReference);
        }
    }

    void OnValidSubmitHandler()
    {
        Comment.Commenter = currentUser.Warga;
        PostNewComment.InvokeAsync(Comment);
        Comment = new();
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (moduleInstance is not null)
        {
            await moduleInstance.DisposeAsync();
        }
    }
}